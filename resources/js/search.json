[[{"l":"Welcome"},{"l":"Contact Us","p":["If you have any questions, suggestions, or need support, please don't hesitate to contact us."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-camera plugin.","This script is a dependencie for Ascended-Tuning."]}],[{"l":"Usage","p":["To start using our camera script, ensure you have a Lifecycle Hook (Webview) set up. Additionally, you'll need a camera.ts file on the client side to utilize the plugin correctly."]},{"i":"exposed-functions---client-api-typescript","l":"Exposed Functions - Client API (TypeScript)"},{"i":"clientside-typescript","l":"Clientside (TypeScript)"},{"i":"mounted---lifecycle-hook-vuejs","l":"Mounted - Lifecycle Hook (VueJS)"},{"l":"Demonstration"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-fuel plugin."]}],[{"i":"#","p":["To ensure ascended-fuel is working properly you will have to follow these steps."]},{"l":"Your Vehicle Creaton","p":["Ensure you vehicle creation has setted values for ascended-fuel. You will find an example below."]},{"l":"Example Command to create a Vehicle"}],[{"i":"how-to-use-plugin-api---serverside","l":"How to use Plugin API - Serverside"},{"i":"exposed-api-functions---serverside","l":"Exposed API Functions - Serverside"}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-hud plugin."]}],[{"l":"Usage"},{"l":"Use HUD API","p":["Only supports pushFuel currently."]}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-inventory-lite plugin.","Use the following command to install Simple-Item-Manager by Stuyk","Install vuedraggable@next per pnpm"]}],[{"i":"use-rebar-plugin-api-serverside","l":"Use Rebar Plugin API (Serverside)"},{"l":"Create Items","p":["Items can be created inside of src/items/file.ts - you can also add new files.","If you add new .ts files make sure to update the allItems Array in the index.ts properly."]}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-notification plugin."]}],[{"l":"Interface"},{"i":"use-rebar-plugin-api-serverside","l":"Use Rebar Plugin API (Serverside)"},{"i":"use-rebar-plugin-api-clientside","l":"Use Rebar Plugin API (Clientside)"},{"l":"Preview"}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-factions plugin."]}],[{"l":"ASC-Factions Documentation"},{"l":"Overview","p":["The ASC-Factions module provides a set of functions for managing factions within the alt-server environment. This includes creating, updating, and deleting factions, as well as managing faction members and ranks."]},{"l":"Import the FactionAPI"},{"l":"Functions"},{"i":"createfactionname-string","l":"createFaction(name: string)","p":["Creates a new faction with the specified name."]},{"i":"usage","l":"Usage:"},{"i":"behavior","l":"Behavior:","p":["Checks if a faction with the given name already exists.","If not, creates a new faction document and adds it to the database.","Logs the creation status."]},{"i":"addrankfactionname-string-newrankname-string","l":"addRank(factionName: string, newRankName: string)","p":["Adds a new rank to the specified faction."]},{"i":"usage-1","l":"Usage:"},{"i":"behavior-1","l":"Behavior:","p":["Checks if the faction exists.","Adds the new rank if it doesn't already exist.","Logs the addition status."]},{"i":"removerankfactionname-string-ranknametoremove-string","l":"removeRank(factionName: string, rankNameToRemove: string)","p":["Removes a rank from the specified faction."]},{"i":"usage-2","l":"Usage:"},{"i":"behavior-2","l":"Behavior:","p":["Checks if the faction exists.","Removes the rank if it exists.","Logs the removal status."]},{"i":"deletefactionfactionname-string","l":"deleteFaction(factionName: string)","p":["Deletes the specified faction."]},{"i":"usage-3","l":"Usage:"},{"i":"behavior-3","l":"Behavior:","p":["Checks if the faction exists.","Deletes the faction document from the database.","Logs the deletion status."]},{"i":"renamefactionfactionname-string-newname-string","l":"renameFaction(factionName: string, newName: string)","p":["Renames the specified faction."]},{"i":"usage-4","l":"Usage:"},{"i":"behavior-4","l":"Behavior:","p":["Checks if the faction exists.","Renames the faction.","Logs the renaming status."]},{"i":"clearfactionfactionname-string","l":"clearFaction(factionName: string)","p":["Clears all members from the specified faction."]},{"i":"usage-5","l":"Usage:"},{"i":"behavior-5","l":"Behavior:","p":["Checks if the faction exists.","Clears all members from the faction.","Logs the clearing status."]},{"i":"getallfactions","l":"getAllFactions()","p":["Returns all factions."]},{"i":"usage-6","l":"Usage:"},{"i":"behavior-6","l":"Behavior:","p":["Retrieves all factions from the database.","Uses a cached version if available."]},{"i":"getfactionbynamefactionname-string","l":"getFactionByName(factionName: string)","p":["Returns the faction with the specified name."]},{"i":"usage-7","l":"Usage:"},{"i":"behavior-7","l":"Behavior:","p":["Retrieves the faction from the cached list of factions."]},{"i":"getplayersfactionplayerid-number","l":"getPlayersFaction(playerId: number)","p":["Returns the faction a player belongs to."]},{"i":"usage-8","l":"Usage:"},{"i":"behavior-8","l":"Behavior:","p":["Checks all factions to find which one the player is a member of.","Logs if the player is not found in any faction."]},{"i":"getplayerrankplayerid-number","l":"getPlayerRank(playerId: number)","p":["Returns the rank of a player within their faction."]},{"i":"usage-9","l":"Usage:"},{"i":"behavior-9","l":"Behavior:","p":["Checks all factions to find the player's rank.","Logs if the player is not found in any faction."]},{"i":"clearfactionscache","l":"clearFactionsCache()","p":["Clears the cached factions list."]},{"i":"usage-10","l":"Usage:"},{"i":"behavior-10","l":"Behavior:","p":["Resets the cached factions list and the initialization flag."]},{"l":"Database Initialization","p":["Ensure the factions collection is created:"]},{"l":"Logging","p":["The module uses alt.logWarning to log various statuses and errors throughout the operations."]},{"l":"Summary","p":["This module provides comprehensive functionality for managing factions in alt-server, including creation, updating, and deletion of factions, as well as member and rank management. It leverages a caching mechanism to optimize performance and ensure efficient data retrieval."]}],[{"l":"ASC-Factions Documentation"},{"l":"Overview","p":["The ASC-Factions module provides a set of functions for managing factions within the alt-server environment. This includes creating, updating, and deleting factions, as well as managing faction members and ranks."]},{"l":"Import the FactionAPI"},{"l":"Functions"},{"i":"invitememberfactionname-string-memberid-number-rankname-string-isleader--false","l":"inviteMember(factionName: string, memberId: number, rankName: string, isLeader = false)","p":["Invites a member to a faction with the specified rank."]},{"i":"usage","l":"Usage:"},{"i":"behavior","l":"Behavior:","p":["Checks if the faction exists.","Checks if the rank exists in the faction.","Adds the member to the faction if not already a member.","Logs the invitation status."]},{"i":"kickmembermemberid-number","l":"kickMember(memberId: number)","p":["Kicks a member from their faction."]},{"i":"usage-1","l":"Usage:"},{"i":"behavior-1","l":"Behavior:","p":["Finds the member in the factions.","Removes the member from the faction.","Logs the removal status."]},{"i":"promotememberfactionname-string-memberid-number","l":"promoteMember(factionName: string, memberId: number)","p":["Promotes a member to the next rank in their faction."]},{"i":"usage-2","l":"Usage:"},{"i":"behavior-2","l":"Behavior:","p":["Checks if the faction exists.","Promotes the member to the next rank.","Logs the promotion status."]},{"i":"demotememberfactionname-string-memberid-number","l":"demoteMember(factionName: string, memberId: number)","p":["Demotes a member to the previous rank in their faction."]},{"i":"usage-3","l":"Usage:"},{"i":"behavior-3","l":"Behavior:","p":["Checks if the faction exists.","Demotes the member to the previous rank.","Logs the demotion status."]},{"l":"Database Initialization","p":["Ensure the factions collection is created:"]},{"l":"Logging","p":["The module uses alt.logWarning to log various statuses and errors throughout the operations."]},{"l":"Summary","p":["This module provides comprehensive functionality for managing factions in alt-server, including creation, updating, and deletion of factions, as well as member and rank management. It leverages a caching mechanism to optimize performance and ensure efficient data retrieval."]}],[{"i":"#","p":["label: \"Manager | Member\" icon: book order: 1400"]},{"l":"ASC-Factions Documentation"},{"l":"Overview","p":["The ASC-Factions module provides a set of functions for managing factions within the alt-server environment. This includes creating, updating, and deleting factions, as well as managing faction members and ranks."]},{"l":"Import the FactionAPI"},{"l":"Functions"},{"i":"addrankpermissionfactionname-string-rankname-string-permission-string","l":"addRankPermission(factionName: string, rankName: string, permission: string)","p":["Adds a permission to a rank within a faction."]},{"i":"usage","l":"Usage:"},{"i":"behavior","l":"Behavior:","p":["Checks if the faction exists.","Checks if the rank exists within the faction.","Adds the permission to the rank if not already present.","Updates the database with the new permission.","Logs the addition status.","Updates member permissions."]},{"i":"removerankpermissionfactionname-string-rankname-string-permission-string","l":"removeRankPermission(factionName: string, rankName: string, permission: string)","p":["Removes a permission from a rank within a faction."]},{"i":"usage-1","l":"Usage:"},{"i":"behavior-1","l":"Behavior:","p":["Checks if the faction exists.","Checks if the rank exists within the faction.","Removes the permission from the rank if present.","Updates the database with the removed permission.","Logs the removal status.","Updates member permissions."]},{"i":"checkrankpermissionfactionname-string-rankname-string-permission-string-promiseboolean","l":"checkRankPermission(factionName: string, rankName: string, permission: string): Promiseboolean","p":["Checks if a rank within a faction has a specific permission."]},{"i":"usage-2","l":"Usage:"},{"i":"behavior-2","l":"Behavior:","p":["Checks if the faction exists.","Checks if the rank exists within the faction.","Checks if the rank has the specified permission.","Logs the permission status.","Returns true if the permission exists, false otherwise."]},{"i":"updatememberpermissionsfactionname-string-memberid-number-newrankname-string","l":"updateMemberPermissions(factionName: string, memberId: number, newRankName: string)","p":["Updates a member's permissions when their rank changes."]},{"i":"usage-3","l":"Usage:"},{"i":"behavior-3","l":"Behavior:","p":["Checks if the faction exists.","Finds the member in the faction.","Updates the member's rank and permissions.","Updates the database with the new rank and permissions.","Logs the update status."]},{"i":"revokeallgrouppermissionsmember","l":"revokeAllGroupPermissions(member)","p":["Revokes all group permissions for a member."]},{"i":"usage-4","l":"Usage:"},{"i":"behavior-4","l":"Behavior:","p":["Logs the member information.","Removes all group permissions for the member."]},{"l":"Database Initialization","p":["Ensure the factions collection is created:"]},{"l":"Logging","p":["The module uses alt.logWarning to log various statuses and errors throughout the operations."]},{"l":"Summary","p":["This module provides comprehensive functionality for managing faction ranks and permissions in alt-server, including adding, removing, checking, and updating permissions, as well as revoking all permissions for a specific member. It leverages a caching mechanism to optimize performance and ensure efficient data retrieval."]}],[{"i":"faction--getter","l":"Faction | Getter"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-fuelstations plugin."]}],[{"l":"Fuel Station System"},{"l":"Overview","p":["The Fuel Station System is a comprehensive module designed to simulate realistic fuel management in a game environment. It allows players to refuel their vehicles at designated fuel stations, providing an immersive gameplay experience."]},{"l":"Features","p":["Multiple fuel types (Gasoline, Diesel, Electric, Kerosene)","Dynamic pricing for different fuel types","Interactive UI for fuel selection and purchase","Support for both targeted and non-targeted interactions","Customizable blips and markers for fuel stations","Integration with vehicle fuel consumption system"]},{"l":"Configuration","p":["The fuel station system can be configured using the FuelstationConfig object in config.ts:","ASC_TARGET: Set to true to use targeted interactions, false for non-targeted interactions","BLIPS: Set to true to display fuel station blips on the map"]},{"l":"Fuel Station Types"},{"l":"Targeted Fuel Stations","p":["Targeted fuel stations are defined in the TARGET_FUELSTATIONS array in config.ts. Each station includes:","Name","Available fuel types and prices","Associated prop model"]},{"l":"Non-Targeted Fuel Stations","p":["Non-targeted fuel stations are defined in the NO_TARGET_FUELSTATIONS array in config.ts. Each station includes:","Name","Position (x, y, z coordinates)","Available fuel types and prices"]},{"l":"Client-Side Implementation","p":["The client-side implementation handles:","Requesting the model of the nearest fuel pump","Displaying the fuel station UI","Sending refuel requests to the server","Key files:","client/index.ts","client/Fuelstations.vue","client/components/fueltype.vue","client/components/hero.vue"]},{"l":"Server-Side Implementation","p":["The server-side implementation manages:","Setting up fuel station interactions (targeted or non-targeted)","Processing refuel requests","Updating vehicle fuel levels","Handling currency transactions","Key files:","server/index.ts","server/src/interactions.ts","server/src/events.ts"]},{"l":"Usage"},{"l":"For Players","p":["Approach a fuel station in a vehicle","Interact with the fuel pump (method depends on configuration)","Select the desired fuel type","Adjust the amount of fuel to purchase","Click the \"Refuel\" button to complete the transaction"]},{"l":"For Developers"},{"l":"Adding a New Fuel Station","p":["Open config.ts","Add a new entry to either TARGET_FUELSTATIONS or NO_TARGET_FUELSTATIONS depending on your configuration","Customize the station properties as needed","Example:"]},{"l":"Customizing the UI","p":["The fuel station UI is implemented using Vue.js components. To customize the appearance:","Modify the relevant .vue files in the client/components directory","Adjust the styles and layout as needed","Ensure all necessary data bindings and event handlers are maintained"]},{"l":"Events","p":["The system uses the following events for communication:","FuelStationEvents.ToClient.OPEN: Open the fuel station UI","FuelStationEvents.ToClient.REQUEST_MODEL: Request the model of the nearest fuel pump","FuelStationEvents.ToServer.CLOSE: Close the fuel station UI","FuelStationEvents.ToServer.REFILL_VEHICLE: Send a refuel request to the server","FuelStationEvents.WebView.SET_DATA: Set the data for the fuel station UI"]},{"l":"Integration","p":["The Fuel Station System integrates with other game systems, including:","Vehicle Management System","Currency System","Player Interaction System","Ensure these systems are properly configured and running for full functionality."]},{"l":"Troubleshooting","p":["If you encounter issues with the Fuel Station System:","Check the server and client console for error messages","Verify that all configuration settings are correct","Ensure that the necessary API dependencies (e.g., ascended-fuel-api, currency-api) are available and up-to-date","Check for conflicts with other systems or mods","For further assistance, please contact the development team or refer to the support documentation."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-target plugin."]}],[{"l":"Ascended Target System","p":["The Ascended Target System is a robust interaction framework designed for alt:V, allowing developers to create dynamic and interactive experiences within their game world. This system enables the creation of both entity-based and position-based interactions, providing a flexible solution for various gameplay scenarios."]},{"l":"Table of Contents","p":["Key Components","Events","API","Types","Client-Side Implementation","Usage Examples"]},{"l":"Key Components","p":["The Ascended Target System consists of several key components:","Server-side API: Manages the creation and destruction of interactions.","Client-side Vue component: Renders the interaction UI.","Shared types and events: Ensures consistency between server and client."]},{"l":"Events","p":["The system uses a set of predefined events for communication between the server and client:"]},{"l":"API","p":["The Ascended Target API provides the following main functions:","createModelInteraction: Creates an interaction for a specific entity model.","createPosInteraction: Creates a position-based interaction.","destroyPosInteraction: Removes a position-based interaction.","getTargetEvents: Returns the TARGET_EVENTS object.","getAvailableObjects: Returns a list of predefined interactive objects."]},{"l":"Types","p":["The system uses several TypeScript types to ensure type safety:"]},{"l":"Client-Side Implementation","p":["The client-side is implemented using a Vue component ( Target.vue) that renders the interaction UI. Key features include:","Dynamic rendering of interaction points and buttons","Keyboard navigation for selecting interactions","Smooth transitions for interaction visibility"]},{"l":"Usage Examples","p":["Here's an example of how to create a position-based interaction:","And here's how to create an entity-based interaction:","This documentation provides an overview of the Ascended Target System. For more detailed information on specific components or usage, please refer to the individual source files or reach out to the development team."]}],[{"l":"Installation"}],[{"l":"Usage"}],[{"l":"TypeScriptSQL Class Documentation"},{"l":"Overview","p":["The TypeScriptSQL class provides a convenient wrapper around MySQL operations using promises. It allows for basic CRUD operations, table creation, and connection handling."]},{"l":"Class Definition"},{"l":"Methods"},{"l":"Constructor","p":["Description: Initializes a new instance of the TypeScriptSQL class and establishes a database connection.","Parameters:","config(mysql.ConnectionConfig): The configuration object for the database connection."]},{"l":"query","p":["Description: Executes a SQL query.","Parameters:","sql(string): The SQL query string.","args(any[], optional): An array of arguments for parameterized queries.","Returns: A promise that resolves with the query results."]},{"l":"createTable","p":["Description: Creates a table if it does not exist.","Parameters:","table(string): The name of the table.","tableDefinition(string): The SQL table definition.","Returns: A promise that resolves when the table is created."]},{"l":"create","p":["Description: Inserts a new record into a table.","Parameters:","table(string): The name of the table.","data(object): An object representing the record to insert.","Returns: A promise that resolves when the record is inserted."]},{"l":"read","p":["Description: Reads records from a table.","Parameters:","table(string): The name of the table.","conditions(object, optional): An object representing query conditions.","Returns: A promise that resolves with the query results."]},{"l":"createOrUpdate","p":["Description: Inserts a new record or updates an existing record.","Parameters:","table(string): The name of the table.","data(object): An object representing the record to insert or update.","Returns: A promise that resolves when the operation is complete."]},{"l":"update","p":["Description: Updates existing records in a table.","Parameters:","table(string): The name of the table.","data(object): An object representing the new data.","conditions(object): An object representing the query conditions.","Returns: A promise that resolves when the records are updated."]},{"l":"delete","p":["Description: Deletes records from a table.","Parameters:","table(string): The name of the table.","conditions(object): An object representing the query conditions.","Returns: A promise that resolves when the records are deleted."]},{"l":"close","p":["Description: Closes the database connection.","Returns: A promise that resolves when the connection is closed."]},{"l":"Examples"},{"l":"Setting up the Connection"},{"l":"Creating a Table"},{"l":"Inserting a Record"},{"l":"Reading Records"},{"l":"Updating Records"},{"l":"Deleting Records"},{"l":"Closing the Connection"}]]