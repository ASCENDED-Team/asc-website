[[{"l":"Welcome"},{"l":"Contact Us","p":["If you have any questions, suggestions, or need support, please don't hesitate to contact us."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-camera plugin.","This script is a dependencie for Ascended-Tuning."]}],[{"l":"Usage","p":["To start using our camera script, ensure you have a Lifecycle Hook (Webview) set up. Additionally, you'll need a camera.ts file on the client side to utilize the plugin correctly."]},{"i":"exposed-functions---client-api-typescript","l":"Exposed Functions - Client API (TypeScript)"},{"i":"clientside-typescript","l":"Clientside (TypeScript)"},{"i":"mounted---lifecycle-hook-vuejs","l":"Mounted - Lifecycle Hook (VueJS)"},{"l":"Demonstration"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-fuel plugin."]}],[{"i":"#","p":["To ensure ascended-fuel is working properly you will have to follow these steps."]},{"l":"Your Vehicle Creaton","p":["Ensure you vehicle creation has setted values for ascended-fuel. You will find an example below."]},{"l":"Example Command to create a Vehicle"}],[{"i":"how-to-use-plugin-api---serverside","l":"How to use Plugin API - Serverside"},{"i":"exposed-api-functions---serverside","l":"Exposed API Functions - Serverside"}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-hud plugin."]}],[{"l":"Usage"},{"l":"Use HUD API","p":["Only supports pushFuel currently."]}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-inventory-lite plugin.","Use the following command to install Simple-Item-Manager by Stuyk","Install vuedraggable@next per pnpm"]}],[{"i":"use-rebar-plugin-api-serverside","l":"Use Rebar Plugin API (Serverside)"},{"l":"Create Items","p":["Items can be created inside of src/items/file.ts - you can also add new files.","If you add new .ts files make sure to update the allItems Array in the index.ts properly."]}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-notification plugin."]}],[{"l":"Interface"},{"i":"use-rebar-plugin-api-serverside","l":"Use Rebar Plugin API (Serverside)"},{"i":"use-rebar-plugin-api-clientside","l":"Use Rebar Plugin API (Clientside)"},{"l":"Preview"}],[{"l":"Config"}],[{"l":"Changelog"}],[{"l":"Faction API"},{"l":"General Operations"},{"i":"createfactionname-string","l":"createFaction(name: string)","p":["Creates a new faction with the specified name if it doesn't already exist.","Parameters:","name(string): The name of the faction to be created.","Returns: Void.","Logs: Logs a warning if the faction already exists."]},{"i":"deletefactionfactionname-string","l":"deleteFaction(factionName: string)","p":["Deletes the faction with the given name.","Parameters:","factionName(string): The name of the faction to delete.","Returns: Void.","Logs: Logs a warning if the faction does not exist."]},{"i":"renamefactionfactionname-string-newname-string","l":"renameFaction(factionName: string, newName: string)","p":["Renames an existing faction.","Parameters:","factionName(string): The current name of the faction.","newName(string): The new name to assign to the faction.","Returns: Void.","Logs: Logs a warning if the faction does not exist."]},{"i":"clearfactionfactionname-string","l":"clearFaction(factionName: string)","p":["Removes all members from a faction, leaving only the leader.","Parameters:","factionName(string): The name of the faction to clear.","Returns: Void.","Logs: Logs a warning if the faction does not exist."]},{"l":"Member Management"},{"i":"invitememberfactionname-string-memberid-number-rankname-string","l":"inviteMember(factionName: string, memberId: number, rankName: string)","p":["Invites a new member to join the faction.","Parameters:","factionName(string): The name of the faction to invite the member to.","memberId(number): The ID of the player to invite.","rankName(string): The initial rank to assign to the new member.","Returns: Void.","Logs: Logs a warning if the member is already in a faction."]},{"i":"kickmembermemberid-number","l":"kickMember(memberId: number)","p":["Removes a member from their faction.","Parameters:","memberId(number): The ID of the member to kick.","Returns: Void.","Logs: Logs a warning if the member is not found in any faction."]},{"i":"promotemembermemberid-number-newrank-string","l":"promoteMember(memberId: number, newRank: string)","p":["Promotes a member within their faction to a higher rank.","Parameters:","memberId(number): The ID of the member to promote.","newRank(string): The new rank to assign to the member.","Returns: Void.","Logs: Logs a warning if the member is not found in any faction."]},{"i":"demotemembermemberid-number-newrank-string","l":"demoteMember(memberId: number, newRank: string)","p":["Demotes a member within their faction to a lower rank.","Parameters:","memberId(number): The ID of the member to demote.","newRank(string): The new rank to assign to the member.","Returns: Void.","Logs: Logs a warning if the member is not found in any faction."]},{"l":"Utility Functions"},{"i":"getplayersfactionplayerid-number-promisefaction--null","l":"getPlayersFaction(playerId: number): PromiseFaction | null","p":["Retrieves the faction of a player based on their ID.","Parameters:","playerId(number): The ID of the player whose faction is to be retrieved.","Returns: A Promise resolving to the Faction object if the player is in a faction, otherwise null.","Logs: Logs a warning if the player is not a member of any faction."]},{"l":"Internal Functions"},{"i":"getallfactions-promisefaction","l":"getAllFactions(): PromiseFaction[]","p":["Retrieves all factions from the database.","Returns: A Promise resolving to an array of Faction objects.","Logs: Logs a warning if no factions are found in the database."]},{"i":"getfactionbynamefactionname-string-promisefaction--undefined","l":"getFactionByName(factionName: string): PromiseFaction | undefined","p":["Retrieves a faction from the database by its name.","Parameters:","factionName(string): The name of the faction to retrieve.","Returns: A Promise resolving to the Faction object if found, otherwise undefined.","Logs: Logs a warning if the faction with the specified name is not found."]},{"i":"clearfactionscache","l":"clearFactionsCache()","p":["Clears the cached factions data.","Returns: Void.","Notes: Called after database operations (create, update, delete) to ensure data consistency."]},{"l":"Initialization"},{"i":"createfactionscollection","l":"createFactionsCollection()","p":["Creates the database collection for factions using the configuration.","Returns: Void.","Notes: Should be called during application startup to ensure the database collection exists."]}],[{"l":"Installation"}],[{"l":"Usage"}]]