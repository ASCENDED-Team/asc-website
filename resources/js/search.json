[[{"l":"Welcome"},{"l":"Contact Us","p":["If you have any questions, suggestions, or need support, please don't hesitate to contact us."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-camera plugin.","This script is a dependencie for Ascended-Tuning."]}],[{"l":"Usage","p":["To start using our camera script, ensure you have a Lifecycle Hook (Webview) set up. Additionally, you'll need a camera.ts file on the client side to utilize the plugin correctly."]},{"i":"exposed-functions---client-api-typescript","l":"Exposed Functions - Client API (TypeScript)"},{"i":"clientside-typescript","l":"Clientside (TypeScript)"},{"i":"mounted---lifecycle-hook-vuejs","l":"Mounted - Lifecycle Hook (VueJS)"},{"l":"Demonstration"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-fuel plugin."]}],[{"l":"Ascended Fuel System Overview","p":["The Ascended Fuel System for Alt:V servers provides advanced vehicle fuel management features, including real-time fuel consumption tracking, fuel type handling, and interaction with the player's vehicle engine."]},{"l":"Features"},{"l":"1. Fuel Properties for Vehicles","p":["Assigns fuel-related properties such as consumption rate, max capacity, and fuel type.","Managed using the Rebar system."]},{"l":"2. Fuel Consumption Tracking","p":["Tracks vehicle fuel consumption based on distance traveled and speed in real-time."]},{"l":"3. Fuel Refill","p":["Allows players to refill their vehicles or nearby vehicles with a specified amount or fully."]},{"l":"4. Fuel Type Handling","p":["Supports multiple fuel types, detecting and managing fuel type mismatches."]},{"l":"5. Out of Fuel Scenario","p":["Automatically turns off the engine when fuel runs out and notifies the player."]},{"l":"6. Engine Control","p":["Allows players to toggle the engine on/off, preventing start when fuel is empty or the engine is damaged."]},{"l":"7. Notifications","p":["Sends in-game notifications for events such as low fuel, refuel success, and engine breakdown."]},{"l":"8. Getter Functions","p":["Utility functions to retrieve fuel properties like type, consumption, max fuel, and current fuel level."]},{"l":"9. Engine Breakdown and Repair","p":["Handles engine breakdowns due to fuel type mismatches and allows repairs."]},{"l":"Dependencies","p":["Alt:V Server","Rebar: For vehicle data management.","Ascended Notification API: For sending notifications."]},{"l":"Configuration Options","p":["checkForUpdates: Check for updates automatically.","AscHUD: Use default ASC-Hud.","ASCHudPro: Use ASCHudPRO.","Debug: Enable or disable debug mode.","DefaultConsumption: Default vehicle consumption rates.","AscNotification: Enable or disable fuel notifications.","DefaultFuel: Set default fuel type.","DefaultMax: Set default maximum fuel capacity.","enableSound: Enable or disable engine sound effects."]}],[{"i":"how-to-use-plugin-api---serverside","l":"How to use Plugin API - Serverside"},{"i":"exposed-api-functions---serverside","l":"Exposed API Functions - Serverside"}],[{"l":"Config"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-hud plugin."]}],[{"l":"Usage"},{"l":"Use HUD API","p":["Only supports pushFuel currently."]}],[{"l":"Config"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-notification plugin."]}],[{"l":"Interface"},{"i":"use-rebar-plugin-api-serverside","l":"Use Rebar Plugin API (Serverside)"},{"i":"use-rebar-plugin-api-clientside","l":"Use Rebar Plugin API (Clientside)"},{"l":"Preview"}],[{"l":"Config"}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-fuelstations plugin."]}],[{"l":"Fuel Station System"},{"l":"Overview","p":["The Fuel Station System is a comprehensive module designed to simulate realistic fuel management in a game environment. It allows players to refuel their vehicles at designated fuel stations, providing an immersive gameplay experience."]},{"l":"Features","p":["Multiple fuel types (Gasoline, Diesel, Electric, Kerosene)","Dynamic pricing for different fuel types","Interactive UI for fuel selection and purchase","Support for both targeted and non-targeted interactions","Customizable blips and markers for fuel stations","Integration with vehicle fuel consumption system"]},{"l":"Configuration","p":["The fuel station system can be configured using the FuelstationConfig object in config.ts:","ASC_TARGET: Set to true to use targeted interactions, false for non-targeted interactions","BLIPS: Set to true to display fuel station blips on the map"]},{"l":"Fuel Station Types"},{"l":"Targeted Fuel Stations","p":["Targeted fuel stations are defined in the TARGET_FUELSTATIONS array in config.ts. Each station includes:","Name","Available fuel types and prices","Associated prop model"]},{"l":"Non-Targeted Fuel Stations","p":["Non-targeted fuel stations are defined in the NO_TARGET_FUELSTATIONS array in config.ts. Each station includes:","Name","Position (x, y, z coordinates)","Available fuel types and prices"]},{"l":"Client-Side Implementation","p":["The client-side implementation handles:","Requesting the model of the nearest fuel pump","Displaying the fuel station UI","Sending refuel requests to the server","Key files:","client/index.ts","client/Fuelstations.vue","client/components/fueltype.vue","client/components/hero.vue"]},{"l":"Server-Side Implementation","p":["The server-side implementation manages:","Setting up fuel station interactions (targeted or non-targeted)","Processing refuel requests","Updating vehicle fuel levels","Handling currency transactions","Key files:","server/index.ts","server/src/interactions.ts","server/src/events.ts"]},{"l":"Usage"},{"l":"For Players","p":["Approach a fuel station in a vehicle","Interact with the fuel pump (method depends on configuration)","Select the desired fuel type","Adjust the amount of fuel to purchase","Click the \"Refuel\" button to complete the transaction"]},{"l":"For Developers"},{"l":"Adding a New Fuel Station","p":["Open config.ts","Add a new entry to either TARGET_FUELSTATIONS or NO_TARGET_FUELSTATIONS depending on your configuration","Customize the station properties as needed","Example:"]},{"l":"Customizing the UI","p":["The fuel station UI is implemented using Vue.js components. To customize the appearance:","Modify the relevant .vue files in the client/components directory","Adjust the styles and layout as needed","Ensure all necessary data bindings and event handlers are maintained"]},{"l":"Events","p":["The system uses the following events for communication:","FuelStationEvents.ToClient.OPEN: Open the fuel station UI","FuelStationEvents.ToClient.REQUEST_MODEL: Request the model of the nearest fuel pump","FuelStationEvents.ToServer.CLOSE: Close the fuel station UI","FuelStationEvents.ToServer.REFILL_VEHICLE: Send a refuel request to the server","FuelStationEvents.WebView.SET_DATA: Set the data for the fuel station UI"]},{"l":"Integration","p":["The Fuel Station System integrates with other game systems, including:","Vehicle Management System","Currency System","Player Interaction System","Ensure these systems are properly configured and running for full functionality."]},{"l":"Troubleshooting","p":["If you encounter issues with the Fuel Station System:","Check the server and client console for error messages","Verify that all configuration settings are correct","Ensure that the necessary API dependencies (e.g., ascended-fuel-api, currency-api) are available and up-to-date","Check for conflicts with other systems or mods","For further assistance, please contact the development team or refer to the support documentation."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-hud-pro plugin."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-menu plugin."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-nametags plugin."]}],[{"l":"Installation"},{"l":"Installation Guide","p":["In your Rebar directory run the following command to clone the ascended-target plugin."]}],[{"l":"Ascended Target System","p":["The Ascended Target System is a robust interaction framework designed for alt:V, allowing developers to create dynamic and interactive experiences within their game world. This system enables the creation of both entity-based and position-based interactions, providing a flexible solution for various gameplay scenarios."]},{"l":"Table of Contents","p":["Key Components","Events","API","Types","Client-Side Implementation","Usage Examples"]},{"l":"Key Components","p":["The Ascended Target System consists of several key components:","Server-side API: Manages the creation and destruction of interactions.","Client-side Vue component: Renders the interaction UI.","Shared types and events: Ensures consistency between server and client."]},{"l":"Events","p":["The system uses a set of predefined events for communication between the server and client:"]},{"l":"API","p":["The Ascended Target API provides the following main functions:","createModelInteraction: Creates an interaction for a specific entity model.","createPosInteraction: Creates a position-based interaction.","destroyPosInteraction: Removes a position-based interaction.","getTargetEvents: Returns the TARGET_EVENTS object.","getAvailableObjects: Returns a list of predefined interactive objects."]},{"l":"Types","p":["The system uses several TypeScript types to ensure type safety:"]},{"l":"Client-Side Implementation","p":["The client-side is implemented using a Vue component ( Target.vue) that renders the interaction UI. Key features include:","Dynamic rendering of interaction points and buttons","Keyboard navigation for selecting interactions","Smooth transitions for interaction visibility"]},{"l":"Usage Examples","p":["Here's an example of how to create a position-based interaction:","And here's how to create an entity-based interaction:","This documentation provides an overview of the Ascended Target System. For more detailed information on specific components or usage, please refer to the individual source files or reach out to the development team."]}],[{"l":"Installation"}],[{"l":"Usage"}],[{"l":"TypeScriptSQL Class Documentation"},{"l":"Overview","p":["The TypeScriptSQL class provides a convenient wrapper around MySQL operations using promises. It allows for basic CRUD operations, table creation, and connection handling."]},{"l":"Class Definition"},{"l":"Methods"},{"l":"Constructor","p":["Description: Initializes a new instance of the TypeScriptSQL class and establishes a database connection.","Parameters:","config(mysql.ConnectionConfig): The configuration object for the database connection."]},{"l":"query","p":["Description: Executes a SQL query.","Parameters:","sql(string): The SQL query string.","args(any[], optional): An array of arguments for parameterized queries.","Returns: A promise that resolves with the query results."]},{"l":"createTable","p":["Description: Creates a table if it does not exist.","Parameters:","table(string): The name of the table.","tableDefinition(string): The SQL table definition.","Returns: A promise that resolves when the table is created."]},{"l":"create","p":["Description: Inserts a new record into a table.","Parameters:","table(string): The name of the table.","data(object): An object representing the record to insert.","Returns: A promise that resolves when the record is inserted."]},{"l":"read","p":["Description: Reads records from a table.","Parameters:","table(string): The name of the table.","conditions(object, optional): An object representing query conditions.","Returns: A promise that resolves with the query results."]},{"l":"createOrUpdate","p":["Description: Inserts a new record or updates an existing record.","Parameters:","table(string): The name of the table.","data(object): An object representing the record to insert or update.","Returns: A promise that resolves when the operation is complete."]},{"l":"update","p":["Description: Updates existing records in a table.","Parameters:","table(string): The name of the table.","data(object): An object representing the new data.","conditions(object): An object representing the query conditions.","Returns: A promise that resolves when the records are updated."]},{"l":"delete","p":["Description: Deletes records from a table.","Parameters:","table(string): The name of the table.","conditions(object): An object representing the query conditions.","Returns: A promise that resolves when the records are deleted."]},{"l":"close","p":["Description: Closes the database connection.","Returns: A promise that resolves when the connection is closed."]},{"l":"Examples"},{"l":"Setting up the Connection"},{"l":"Creating a Table"},{"l":"Inserting a Record"},{"l":"Reading Records"},{"l":"Updating Records"},{"l":"Deleting Records"},{"l":"Closing the Connection"}]]